// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: multiUser-sync.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from multiUser-sync.proto</summary>
public static partial class MultiUserSyncReflection {

  #region Descriptor
  /// <summary>File descriptor for multiUser-sync.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MultiUserSyncReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRtdWx0aVVzZXItc3luYy5wcm90byJ9CgRVc2VyEgoKAmlkGAEgASgFEiUK",
          "FHVzZXJQaHlzaWNhbFBvc2l0aW9uGAIgASgLMgcuVmVjdG9yEh8KDnVzZXJW",
          "UlBvc2l0aW9uGAMgASgLMgcuVmVjdG9yEiEKDHVzZXJSb3RhdGlvbhgEIAEo",
          "CzILLlF1YWRydWJsZXQiiAEKB1RyYWNrZXISCgoCaWQYASABKAUSKAoXdHJh",
          "Y2tlclBoeXNpY2FsUG9zaXRpb24YAiABKAsyBy5WZWN0b3ISIQoQdHJhY2tl",
          "clZSUG9zaXRvbhgDIAEoCzIHLlZlY3RvchIkCg90cmFja2VyUm90YXRpb24Y",
          "BCABKAsyCy5RdWFkcnVibGV0IikKBlZlY3RvchIJCgF4GAEgASgCEgkKAXkY",
          "AiABKAISCQoBehgDIAEoAiI4CgpRdWFkcnVibGV0EgkKAXgYASABKAISCQoB",
          "eRgCIAEoAhIJCgF6GAMgASgCEgkKAXcYBCABKAIiJAoLUmVxdWVzdFVzZXIS",
          "FQoNcmVxdWVzdFVzZXJJRBgBIAEoBSIqCg5SZXF1ZXN0VHJhY2tlchIYChBy",
          "ZXF1ZXN0VHJhY2tlcklEGAEgASgFIhwKCFJlc3BvbnNlEhAKCHJlc3BvbnNl",
          "GAEgASgJMqABCg1tdWx0aVVzZXJTeW5jEiAKB2dldFVzZXISDC5SZXF1ZXN0",
          "VXNlchoFLlVzZXIiABIdCgdzZXRVc2VyEgUuVXNlchoJLlJlc3BvbnNlIgAS",
          "KQoKZ2V0VHJhY2tlchIPLlJlcXVlc3RUcmFja2VyGgguVHJhY2tlciIAEiMK",
          "CnNldFRyYWNrZXISCC5UcmFja2VyGgkuUmVzcG9uc2UiAGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::User), global::User.Parser, new[]{ "Id", "UserPhysicalPosition", "UserVRPosition", "UserRotation" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Tracker), global::Tracker.Parser, new[]{ "Id", "TrackerPhysicalPosition", "TrackerVRPositon", "TrackerRotation" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Vector), global::Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Quadrublet), global::Quadrublet.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestUser), global::RequestUser.Parser, new[]{ "RequestUserID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RequestTracker), global::RequestTracker.Parser, new[]{ "RequestTrackerID" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Response), global::Response.Parser, new[]{ "Response_" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class User : pb::IMessage<User> {
  private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<User> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MultiUserSyncReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public User() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public User(User other) : this() {
    id_ = other.id_;
    userPhysicalPosition_ = other.userPhysicalPosition_ != null ? other.userPhysicalPosition_.Clone() : null;
    userVRPosition_ = other.userVRPosition_ != null ? other.userVRPosition_.Clone() : null;
    userRotation_ = other.userRotation_ != null ? other.userRotation_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public User Clone() {
    return new User(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "userPhysicalPosition" field.</summary>
  public const int UserPhysicalPositionFieldNumber = 2;
  private global::Vector userPhysicalPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector UserPhysicalPosition {
    get { return userPhysicalPosition_; }
    set {
      userPhysicalPosition_ = value;
    }
  }

  /// <summary>Field number for the "userVRPosition" field.</summary>
  public const int UserVRPositionFieldNumber = 3;
  private global::Vector userVRPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector UserVRPosition {
    get { return userVRPosition_; }
    set {
      userVRPosition_ = value;
    }
  }

  /// <summary>Field number for the "userRotation" field.</summary>
  public const int UserRotationFieldNumber = 4;
  private global::Quadrublet userRotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Quadrublet UserRotation {
    get { return userRotation_; }
    set {
      userRotation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as User);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(User other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(UserPhysicalPosition, other.UserPhysicalPosition)) return false;
    if (!object.Equals(UserVRPosition, other.UserVRPosition)) return false;
    if (!object.Equals(UserRotation, other.UserRotation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (userPhysicalPosition_ != null) hash ^= UserPhysicalPosition.GetHashCode();
    if (userVRPosition_ != null) hash ^= UserVRPosition.GetHashCode();
    if (userRotation_ != null) hash ^= UserRotation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (userPhysicalPosition_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(UserPhysicalPosition);
    }
    if (userVRPosition_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UserVRPosition);
    }
    if (userRotation_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(UserRotation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (userPhysicalPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserPhysicalPosition);
    }
    if (userVRPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserVRPosition);
    }
    if (userRotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserRotation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(User other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.userPhysicalPosition_ != null) {
      if (userPhysicalPosition_ == null) {
        userPhysicalPosition_ = new global::Vector();
      }
      UserPhysicalPosition.MergeFrom(other.UserPhysicalPosition);
    }
    if (other.userVRPosition_ != null) {
      if (userVRPosition_ == null) {
        userVRPosition_ = new global::Vector();
      }
      UserVRPosition.MergeFrom(other.UserVRPosition);
    }
    if (other.userRotation_ != null) {
      if (userRotation_ == null) {
        userRotation_ = new global::Quadrublet();
      }
      UserRotation.MergeFrom(other.UserRotation);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          if (userPhysicalPosition_ == null) {
            userPhysicalPosition_ = new global::Vector();
          }
          input.ReadMessage(userPhysicalPosition_);
          break;
        }
        case 26: {
          if (userVRPosition_ == null) {
            userVRPosition_ = new global::Vector();
          }
          input.ReadMessage(userVRPosition_);
          break;
        }
        case 34: {
          if (userRotation_ == null) {
            userRotation_ = new global::Quadrublet();
          }
          input.ReadMessage(userRotation_);
          break;
        }
      }
    }
  }

}

public sealed partial class Tracker : pb::IMessage<Tracker> {
  private static readonly pb::MessageParser<Tracker> _parser = new pb::MessageParser<Tracker>(() => new Tracker());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Tracker> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MultiUserSyncReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Tracker() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Tracker(Tracker other) : this() {
    id_ = other.id_;
    trackerPhysicalPosition_ = other.trackerPhysicalPosition_ != null ? other.trackerPhysicalPosition_.Clone() : null;
    trackerVRPositon_ = other.trackerVRPositon_ != null ? other.trackerVRPositon_.Clone() : null;
    trackerRotation_ = other.trackerRotation_ != null ? other.trackerRotation_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Tracker Clone() {
    return new Tracker(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "trackerPhysicalPosition" field.</summary>
  public const int TrackerPhysicalPositionFieldNumber = 2;
  private global::Vector trackerPhysicalPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector TrackerPhysicalPosition {
    get { return trackerPhysicalPosition_; }
    set {
      trackerPhysicalPosition_ = value;
    }
  }

  /// <summary>Field number for the "trackerVRPositon" field.</summary>
  public const int TrackerVRPositonFieldNumber = 3;
  private global::Vector trackerVRPositon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Vector TrackerVRPositon {
    get { return trackerVRPositon_; }
    set {
      trackerVRPositon_ = value;
    }
  }

  /// <summary>Field number for the "trackerRotation" field.</summary>
  public const int TrackerRotationFieldNumber = 4;
  private global::Quadrublet trackerRotation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Quadrublet TrackerRotation {
    get { return trackerRotation_; }
    set {
      trackerRotation_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Tracker);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Tracker other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(TrackerPhysicalPosition, other.TrackerPhysicalPosition)) return false;
    if (!object.Equals(TrackerVRPositon, other.TrackerVRPositon)) return false;
    if (!object.Equals(TrackerRotation, other.TrackerRotation)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (trackerPhysicalPosition_ != null) hash ^= TrackerPhysicalPosition.GetHashCode();
    if (trackerVRPositon_ != null) hash ^= TrackerVRPositon.GetHashCode();
    if (trackerRotation_ != null) hash ^= TrackerRotation.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (trackerPhysicalPosition_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(TrackerPhysicalPosition);
    }
    if (trackerVRPositon_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(TrackerVRPositon);
    }
    if (trackerRotation_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(TrackerRotation);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (trackerPhysicalPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackerPhysicalPosition);
    }
    if (trackerVRPositon_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackerVRPositon);
    }
    if (trackerRotation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackerRotation);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Tracker other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.trackerPhysicalPosition_ != null) {
      if (trackerPhysicalPosition_ == null) {
        trackerPhysicalPosition_ = new global::Vector();
      }
      TrackerPhysicalPosition.MergeFrom(other.TrackerPhysicalPosition);
    }
    if (other.trackerVRPositon_ != null) {
      if (trackerVRPositon_ == null) {
        trackerVRPositon_ = new global::Vector();
      }
      TrackerVRPositon.MergeFrom(other.TrackerVRPositon);
    }
    if (other.trackerRotation_ != null) {
      if (trackerRotation_ == null) {
        trackerRotation_ = new global::Quadrublet();
      }
      TrackerRotation.MergeFrom(other.TrackerRotation);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          if (trackerPhysicalPosition_ == null) {
            trackerPhysicalPosition_ = new global::Vector();
          }
          input.ReadMessage(trackerPhysicalPosition_);
          break;
        }
        case 26: {
          if (trackerVRPositon_ == null) {
            trackerVRPositon_ = new global::Vector();
          }
          input.ReadMessage(trackerVRPositon_);
          break;
        }
        case 34: {
          if (trackerRotation_ == null) {
            trackerRotation_ = new global::Quadrublet();
          }
          input.ReadMessage(trackerRotation_);
          break;
        }
      }
    }
  }

}

public sealed partial class Vector : pb::IMessage<Vector> {
  private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Vector> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MultiUserSyncReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector(Vector other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Vector Clone() {
    return new Vector(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Vector);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Vector other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Vector other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class Quadrublet : pb::IMessage<Quadrublet> {
  private static readonly pb::MessageParser<Quadrublet> _parser = new pb::MessageParser<Quadrublet>(() => new Quadrublet());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Quadrublet> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MultiUserSyncReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Quadrublet() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Quadrublet(Quadrublet other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    w_ = other.w_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Quadrublet Clone() {
    return new Quadrublet(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private float y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private float z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 4;
  private float w_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Quadrublet);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Quadrublet other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
    if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
    if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (Y != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Y);
    }
    if (Z != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Z);
    }
    if (W != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(W);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (Y != 0F) {
      size += 1 + 4;
    }
    if (Z != 0F) {
      size += 1 + 4;
    }
    if (W != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Quadrublet other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.Y != 0F) {
      Y = other.Y;
    }
    if (other.Z != 0F) {
      Z = other.Z;
    }
    if (other.W != 0F) {
      W = other.W;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          Y = input.ReadFloat();
          break;
        }
        case 29: {
          Z = input.ReadFloat();
          break;
        }
        case 37: {
          W = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class RequestUser : pb::IMessage<RequestUser> {
  private static readonly pb::MessageParser<RequestUser> _parser = new pb::MessageParser<RequestUser>(() => new RequestUser());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RequestUser> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MultiUserSyncReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestUser() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestUser(RequestUser other) : this() {
    requestUserID_ = other.requestUserID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestUser Clone() {
    return new RequestUser(this);
  }

  /// <summary>Field number for the "requestUserID" field.</summary>
  public const int RequestUserIDFieldNumber = 1;
  private int requestUserID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RequestUserID {
    get { return requestUserID_; }
    set {
      requestUserID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RequestUser);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RequestUser other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestUserID != other.RequestUserID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestUserID != 0) hash ^= RequestUserID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestUserID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RequestUserID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestUserID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestUserID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RequestUser other) {
    if (other == null) {
      return;
    }
    if (other.RequestUserID != 0) {
      RequestUserID = other.RequestUserID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestUserID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RequestTracker : pb::IMessage<RequestTracker> {
  private static readonly pb::MessageParser<RequestTracker> _parser = new pb::MessageParser<RequestTracker>(() => new RequestTracker());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RequestTracker> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MultiUserSyncReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestTracker() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestTracker(RequestTracker other) : this() {
    requestTrackerID_ = other.requestTrackerID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RequestTracker Clone() {
    return new RequestTracker(this);
  }

  /// <summary>Field number for the "requestTrackerID" field.</summary>
  public const int RequestTrackerIDFieldNumber = 1;
  private int requestTrackerID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RequestTrackerID {
    get { return requestTrackerID_; }
    set {
      requestTrackerID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RequestTracker);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RequestTracker other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RequestTrackerID != other.RequestTrackerID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RequestTrackerID != 0) hash ^= RequestTrackerID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RequestTrackerID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RequestTrackerID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RequestTrackerID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RequestTrackerID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RequestTracker other) {
    if (other == null) {
      return;
    }
    if (other.RequestTrackerID != 0) {
      RequestTrackerID = other.RequestTrackerID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RequestTrackerID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Response : pb::IMessage<Response> {
  private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MultiUserSyncReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response(Response other) : this() {
    response_ = other.response_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Response Clone() {
    return new Response(this);
  }

  /// <summary>Field number for the "response" field.</summary>
  public const int Response_FieldNumber = 1;
  private string response_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Response_ {
    get { return response_; }
    set {
      response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Response_ != other.Response_) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Response_.Length != 0) hash ^= Response_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Response_.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Response_);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Response_.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Response_);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Response other) {
    if (other == null) {
      return;
    }
    if (other.Response_.Length != 0) {
      Response_ = other.Response_;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Response_ = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
