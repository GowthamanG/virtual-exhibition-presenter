// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: multiUser-sync.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class multiUserSync
{
  static readonly string __ServiceName = "multiUserSync";

  static readonly grpc::Marshaller<global::RequestUser> __Marshaller_RequestUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RequestUser.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::User> __Marshaller_User = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::User.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Confirmation> __Marshaller_Confirmation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Confirmation.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::RequestTracker> __Marshaller_RequestTracker = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::RequestTracker.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Tracker> __Marshaller_Tracker = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tracker.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::Vector> __Marshaller_Vector = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vector.Parser.ParseFrom);

  static readonly grpc::Method<global::RequestUser, global::User> __Method_getUser = new grpc::Method<global::RequestUser, global::User>(
      grpc::MethodType.Unary,
      __ServiceName,
      "getUser",
      __Marshaller_RequestUser,
      __Marshaller_User);

  static readonly grpc::Method<global::User, global::Confirmation> __Method_setUser = new grpc::Method<global::User, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "setUser",
      __Marshaller_User,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::RequestTracker, global::Tracker> __Method_getTracker = new grpc::Method<global::RequestTracker, global::Tracker>(
      grpc::MethodType.Unary,
      __ServiceName,
      "getTracker",
      __Marshaller_RequestTracker,
      __Marshaller_Tracker);

  static readonly grpc::Method<global::Tracker, global::Confirmation> __Method_setTracker = new grpc::Method<global::Tracker, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "setTracker",
      __Marshaller_Tracker,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::Vector, global::Confirmation> __Method_setDistanceTeleport = new grpc::Method<global::Vector, global::Confirmation>(
      grpc::MethodType.Unary,
      __ServiceName,
      "setDistanceTeleport",
      __Marshaller_Vector,
      __Marshaller_Confirmation);

  static readonly grpc::Method<global::RequestUser, global::Vector> __Method_getDistanceTeleport = new grpc::Method<global::RequestUser, global::Vector>(
      grpc::MethodType.Unary,
      __ServiceName,
      "getDistanceTeleport",
      __Marshaller_RequestUser,
      __Marshaller_Vector);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::MultiUserSyncReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of multiUserSync</summary>
  public abstract partial class multiUserSyncBase
  {
    public virtual global::System.Threading.Tasks.Task<global::User> getUser(global::RequestUser request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> setUser(global::User request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Tracker> getTracker(global::RequestTracker request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> setTracker(global::Tracker request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Confirmation> setDistanceTeleport(global::Vector request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

    public virtual global::System.Threading.Tasks.Task<global::Vector> getDistanceTeleport(global::RequestUser request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for multiUserSync</summary>
  public partial class multiUserSyncClient : grpc::ClientBase<multiUserSyncClient>
  {
    /// <summary>Creates a new client for multiUserSync</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public multiUserSyncClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for multiUserSync that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public multiUserSyncClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected multiUserSyncClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected multiUserSyncClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::User getUser(global::RequestUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return getUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::User getUser(global::RequestUser request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_getUser, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::User> getUserAsync(global::RequestUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return getUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::User> getUserAsync(global::RequestUser request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_getUser, null, options, request);
    }
    public virtual global::Confirmation setUser(global::User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return setUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation setUser(global::User request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_setUser, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> setUserAsync(global::User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return setUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> setUserAsync(global::User request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_setUser, null, options, request);
    }
    public virtual global::Tracker getTracker(global::RequestTracker request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return getTracker(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Tracker getTracker(global::RequestTracker request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_getTracker, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Tracker> getTrackerAsync(global::RequestTracker request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return getTrackerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Tracker> getTrackerAsync(global::RequestTracker request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_getTracker, null, options, request);
    }
    public virtual global::Confirmation setTracker(global::Tracker request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return setTracker(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation setTracker(global::Tracker request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_setTracker, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> setTrackerAsync(global::Tracker request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return setTrackerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> setTrackerAsync(global::Tracker request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_setTracker, null, options, request);
    }
    public virtual global::Confirmation setDistanceTeleport(global::Vector request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return setDistanceTeleport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Confirmation setDistanceTeleport(global::Vector request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_setDistanceTeleport, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> setDistanceTeleportAsync(global::Vector request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return setDistanceTeleportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Confirmation> setDistanceTeleportAsync(global::Vector request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_setDistanceTeleport, null, options, request);
    }
    public virtual global::Vector getDistanceTeleport(global::RequestUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return getDistanceTeleport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::Vector getDistanceTeleport(global::RequestUser request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_getDistanceTeleport, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::Vector> getDistanceTeleportAsync(global::RequestUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return getDistanceTeleportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::Vector> getDistanceTeleportAsync(global::RequestUser request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_getDistanceTeleport, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override multiUserSyncClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new multiUserSyncClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(multiUserSyncBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_getUser, serviceImpl.getUser)
        .AddMethod(__Method_setUser, serviceImpl.setUser)
        .AddMethod(__Method_getTracker, serviceImpl.getTracker)
        .AddMethod(__Method_setTracker, serviceImpl.setTracker)
        .AddMethod(__Method_setDistanceTeleport, serviceImpl.setDistanceTeleport)
        .AddMethod(__Method_getDistanceTeleport, serviceImpl.getDistanceTeleport).Build();
  }

  /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, multiUserSyncBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_getUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RequestUser, global::User>(serviceImpl.getUser));
    serviceBinder.AddMethod(__Method_setUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::User, global::Confirmation>(serviceImpl.setUser));
    serviceBinder.AddMethod(__Method_getTracker, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RequestTracker, global::Tracker>(serviceImpl.getTracker));
    serviceBinder.AddMethod(__Method_setTracker, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tracker, global::Confirmation>(serviceImpl.setTracker));
    serviceBinder.AddMethod(__Method_setDistanceTeleport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Vector, global::Confirmation>(serviceImpl.setDistanceTeleport));
    serviceBinder.AddMethod(__Method_getDistanceTeleport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RequestUser, global::Vector>(serviceImpl.getDistanceTeleport));
  }

}
#endregion
